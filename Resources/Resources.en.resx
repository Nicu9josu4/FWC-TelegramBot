<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="and" xml:space="preserve">
    <value>and</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="DescriptionText" xml:space="preserve">
    <value>This event is created in honor of the football championship from all over the world, You are welcome
anyone who is part of the Moldcell team can participate.
The goal is: Accumulating points and rising to the top to receive a prize.
Football-World-Championship year 2022 is organized by 32 football teams following 64 games between teams
The given event is not a game of chance or an environment in which it will be necessary to invest something.</value>
  </data>
  <data name="English" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="Enter your name, surname and phone according to the model:" xml:space="preserve">
    <value>Enter your name, surname and phone number according to the model:</value>
  </data>
  <data name="Equal" xml:space="preserve">
    <value>Equal</value>
  </data>
  <data name="For teams" xml:space="preserve">
    <value>For teams</value>
  </data>
  <data name="from match between" xml:space="preserve">
    <value>from match between</value>
  </data>
  <data name="from team" xml:space="preserve">
    <value>from team</value>
  </data>
  <data name="History" xml:space="preserve">
    <value>History</value>
  </data>
  <data name="In the match between:" xml:space="preserve">
    <value>In the match between:</value>
  </data>
  <data name="Introduce final score by model:" xml:space="preserve">
    <value>Introduce final score by model:</value>
  </data>
  <data name="Main Menu" xml:space="preserve">
    <value>Main Menu</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="None" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="Players" xml:space="preserve">
    <value>Players</value>
  </data>
  <data name="Players with goals:" xml:space="preserve">
    <value>Players with goals:</value>
  </data>
  <data name="Register please on" xml:space="preserve">
    <value>Register please on</value>
  </data>
  <data name="Register prognose for this matches" xml:space="preserve">
    <value>Register prognose for this matches</value>
  </data>
  <data name="Register the final winner team" xml:space="preserve">
    <value>Register the final winner team</value>
  </data>
  <data name="Romanian" xml:space="preserve">
    <value>Romanian</value>
  </data>
  <data name="Rules" xml:space="preserve">
    <value>Rules</value>
  </data>
  <data name="RulesText" xml:space="preserve">
    <value>- Read the rules carefully and if you agree, press the 'Start the game' button to participate
- To be able to participate in this event, it will be necessary to register with your name, surname and staff number.
  to be able to determine the winner "http://t.me/FWChampionshipBot"
- A match will last 90 minutes, the participants will have to predict the winnings before the matches start,
In total there are 32 teams, which means there will be 64 games.
- For each correct answer, the participant will receive points:
* Predicting the win of the correct order or tie - 1 point
* Correct total score prediction - 5 points
* Predicting the player who will score a goal - 3 points
* Forecasting the winning team until the date of:
** December 3 - 50 points
** December 9 - 25 points
** December 13 - 10 points
- Each participant can predict 3 times in a match: only one team out of two,
The total score or tie and only one player will score a goal regardless of the time of the game
- The more points you have, the greater the chance to get the first place</value>
  </data>
  <data name="Russian" xml:space="preserve">
    <value>Russian</value>
  </data>
  <data name="See the best voters" xml:space="preserve">
    <value>Participants results</value>
  </data>
  <data name="Select final score of the match" xml:space="preserve">
    <value>Click here to select final score</value>
  </data>
  <data name="Select Final Team" xml:space="preserve">
    <value>Select the Winner of the Football World Cup 2022</value>
  </data>
  <data name="Select Language" xml:space="preserve">
    <value>Select Language</value>
  </data>
  <data name="Select Match" xml:space="preserve">
    <value>Select Match</value>
  </data>
  <data name="Select Player" xml:space="preserve">
    <value>Select Player</value>
  </data>
  <data name="Select player from team" xml:space="preserve">
    <value>Select player from team</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Something went wrong" xml:space="preserve">
    <value>Something went wrong</value>
  </data>
  <data name="Start Prognose" xml:space="preserve">
    <value>Start Prognose</value>
  </data>
  <data name="Teams or Equal" xml:space="preserve">
    <value>Teams or Equal</value>
  </data>
  <data name="The final score" xml:space="preserve">
    <value>The final score</value>
  </data>
  <data name="The score cannot be negative" xml:space="preserve">
    <value>The score cannot be negative</value>
  </data>
  <data name="the winning team" xml:space="preserve">
    <value>The winning team</value>
  </data>
  <data name="There is no such page" xml:space="preserve">
    <value>There is no such page</value>
  </data>
  <data name="Top Voters" xml:space="preserve">
    <value>Top Voters</value>
  </data>
  <data name="Total" xml:space="preserve">
    <value>Total</value>
  </data>
  <data name="Try command" xml:space="preserve">
    <value>Try command</value>
  </data>
  <data name="vote please" xml:space="preserve">
    <value>Vote please:</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="You can select match and get many points or you can try to select who was win in final" xml:space="preserve">
    <value>You can select match and get many points or you can try to select who was win in final</value>
  </data>
  <data name="You entered an incorrect score, try again" xml:space="preserve">
    <value>You entered an incorrect score, try again</value>
  </data>
  <data name="You have chosen the team that will come out in the end" xml:space="preserve">
    <value>You have chosen the team that will come out in the end</value>
  </data>
  <data name="You have entered an incorrect name" xml:space="preserve">
    <value>You have entered an incorrect name</value>
  </data>
  <data name="You have entered an incorrect phone number, please try again" xml:space="preserve">
    <value>You have entered an incorrect phone number, please try again</value>
  </data>
  <data name="You have not entered enough data, try again" xml:space="preserve">
    <value>You have not entered enough data, try again</value>
  </data>
  <data name="You have not entered the data" xml:space="preserve">
    <value>You have not entered the data</value>
  </data>
  <data name="You have registered, do you want to change the data?" xml:space="preserve">
    <value>You have already registered, do you want to change the data?</value>
  </data>
  <data name="You have registred successfully" xml:space="preserve">
    <value>You have registred successfully</value>
  </data>
  <data name="You have select" xml:space="preserve">
    <value>You have select</value>
  </data>
  <data name="You have select equal" xml:space="preserve">
    <value>You have select equal</value>
  </data>
  <data name="You have select equal from match between" xml:space="preserve">
    <value>You have select equal from match between</value>
  </data>
  <data name="You have select player" xml:space="preserve">
    <value>You have select player</value>
  </data>
  <data name="You have select score" xml:space="preserve">
    <value>You have select score</value>
  </data>
  <data name="You have selected" xml:space="preserve">
    <value>You have selected</value>
  </data>
  <data name="You have taken no action" xml:space="preserve">
    <value>You have taken no action</value>
  </data>
  <data name="You have vote:" xml:space="preserve">
    <value>You have vote:</value>
  </data>
  <data name="You have voted equal between" xml:space="preserve">
    <value>You have voted equal between</value>
  </data>
  <data name="You have voted successfully" xml:space="preserve">
    <value>You have voted successfully</value>
  </data>
  <data name="Your number contains too many digits" xml:space="preserve">
    <value>Your number contains too many digits, please try again</value>
  </data>
  <data name="Your number does not contain enough digits" xml:space="preserve">
    <value>Your number does not contain enough digits, please try again</value>
  </data>
</root>